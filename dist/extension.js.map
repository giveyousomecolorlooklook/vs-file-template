{"version":3,"file":"extension.js","mappings":"44BAAA,kBAKA,gBAIW,gBAAOA,CAAUC,GACpBC,EAAOC,OAAOC,iBAAiB,SAASH,IAC5C,CAKO,eAAOI,CAASJ,GACnBC,EAAOC,OAAOG,uBAAuB,SAASL,IAClD,CAKO,kBAAOM,CAAYN,GACtBC,EAAOC,OAAOK,mBAAmB,SAASP,IAC9C,CAKO,0BAAaQ,CAAcC,EAAiBC,GAC/C,GAAqB,IAAjBD,EAAME,OAKV,aAAaV,EAAOC,OAAOM,cAAcC,EAAO,CAC5CG,YAAaF,GAAe,YAL5BG,KAAKP,YAAY,QAOzB,CAMO,oCAAaQ,CAAwBL,EAAiBM,EAAwBL,GACjF,GAAqB,IAAjBD,EAAME,OAKV,OAAO,IAAIK,QAA6BC,IACpC,MAAMC,EAAYjB,EAAOC,OAAOiB,kBAG1BC,EAAyCX,EAAMY,IAAIC,IAAQ,CAC7DC,MAAOD,EACPE,YAAa,MAGjBN,EAAUT,MAAQW,EAClBF,EAAUR,YAAcA,GAAe,UAGnCK,IACAG,EAAUO,MAAQV,GAGtBG,EAAUQ,qBAAqBC,IACvBA,EAAU,KACVV,EAAQU,EAAU,GAAGJ,OACrBL,EAAUU,UAIlBV,EAAUW,UAAU,KAChBZ,OAAQa,GACRZ,EAAUa,YAGdb,EAAUc,SAjCVnB,KAAKP,YAAY,QAmCzB,CAKO,yBAAa2B,CAAavB,EAAsBwB,GACnD,aAAajC,EAAOC,OAAO+B,aAAa,CACpCrB,YAAaF,EACbwB,OAAQA,GAEhB,CAKO,2BAAaC,CAAeC,GAC/B,MAAMC,QAAepC,EAAOC,OAAOiC,eAAe,CAC9CG,gBAAgB,EAChBC,kBAAkB,EAClBC,eAAe,EACfJ,MAAOA,GAAS,UAGpB,OAAOC,IAAS,EACpB,CAKO,8BAAaI,CAAkBzC,GAQlC,MAAkB,aAPGC,EAAOC,OAAOG,uBAC/BL,EACA,CAAE0C,OAAO,GACT,KACA,KAIR,CAKO,2BAAaC,GAMhB,aAAa9B,KAAKL,cALF,CACZ,SACA,QAGqC,OAC7C,E,m2BCzHJ,oBAAyBoC,GACrBC,QAAQC,IAAI,aAGZ,EAAAC,eAAeC,iBAAiBJ,GAGhCK,EAAmB,IAAI,EAAAC,iBACvBN,EAAQO,cAAcC,KAAK,CACvBrB,QAAS,IAAMkB,EAAiBlB,YAIpC,MAAMsB,EAAuBpD,EAAOqD,UAAUC,yBAAyBC,IAC/DA,EAAMC,qBAAqB,kCA+CvC,WACIZ,QAAQC,IAAI,uBAEZ,MAAMY,EAAe,EAAAC,cAAcC,kBAE9BF,EAKA,EAAAC,cAAcE,qBAAqBH,GAMxB,EAAAC,cAAcG,gCAE1BjB,QAAQC,IAAI,YAAYY,KAPxB,EAAAK,QAAQzD,YAAY,wBALpB,EAAAyD,QAAQzD,YAAY,UAc5B,CAlEY0D,KAGRpB,EAAQO,cAAcC,KAAKC,GAqB/B,WACI,MAAMK,EAAe,EAAAC,cAAcC,kBAE9BF,EAKA,EAAAC,cAAcE,qBAAqBH,IAMxC,EAAAC,cAAcG,+BAEdjB,QAAQC,IAAI,YAAYY,MAPpB,EAAAK,QAAQzD,YAAY,uBALpB,EAAAyD,QAAQzD,YAAY,oBAa5B,CAnCI2D,GAEA,EAAAF,QAAQ3D,SAAS,YACrB,EAKA,wBACQ6C,GACAA,EAAiBlB,UAErBc,QAAQC,IAAI,YAChB,EA7CA,kBACA,SACA,SACA,SACA,SAEA,IAAIG,C,UCNJiB,EAAOC,QAAUC,QAAQ,S,23BCAzB,kBACA,SACA,SACA,SAKA,uBAIW,uBAAOpB,CAAiBJ,GAE3B,MAAMyB,EAAgBpE,EAAOqE,SAASC,gBAClC,0BACA,IAAM1D,KAAK2D,uBAITC,EAAgBxE,EAAOqE,SAASC,gBAClC,0BACCG,GAAoB7D,KAAK8D,oBAAoBD,IAI5CE,EAAa3E,EAAOqE,SAASC,gBAC/B,uBACCG,GAAoB7D,KAAKgE,iBAAiBH,IAIzCI,EAAa7E,EAAOqE,SAASC,gBAC/B,uBACA,IAAM1D,KAAKkE,oBAITC,EAAqB/E,EAAOqE,SAASC,gBACvC,kCACA,IAAM1D,KAAKoE,+BAIfrC,EAAQO,cAAcC,KAAKiB,EAAeI,EAAeG,EAAYE,EAAYE,EACrF,CAKQ,gCAAaR,GACjB,UACU,EAAAU,gBAAgBC,gBAC1B,CAAE,MAAOC,GACL,EAAArB,QAAQhE,UAAU,WAAWqF,IACjC,CACJ,CAKQ,gCAAaT,CAAoBD,GACrC,UACU,EAAAQ,gBAAgBG,eAAeX,EACzC,CAAE,MAAOU,GACL,EAAArB,QAAQhE,UAAU,WAAWqF,IACjC,CACJ,CAKQ,6BAAaP,CAAiBH,GAClC,UACU,EAAAQ,gBAAgBI,cAAcZ,EACxC,CAAE,MAAOU,GACL,EAAArB,QAAQhE,UAAU,YAAYqF,IAClC,CACJ,CAKQ,6BAAaL,GACjB,IACI,MAAMQ,QAAe,EAAAxB,QAAQpB,iBAC7B,IAAK4C,EACD,OAGJ,OAAQA,GACJ,IAAK,eACK,EAAA5B,cAAc6B,eACpB,MACJ,IAAK,aACK,EAAAN,gBAAgBO,kBAGlC,CAAE,MAAOL,GACL,EAAArB,QAAQhE,UAAU,WAAWqF,IACjC,CACJ,CAKQ,wCAAaH,GACjB,UACU,EAAAC,gBAAgBQ,gBAC1B,CAAE,MAAON,GACL,EAAArB,QAAQhE,UAAU,WAAWqF,IACjC,CACJ,E,43BC/GJ,kBACA,YAKA,wBAIW,sBAAOO,CAAgBC,GAC1B,IAEI,OADaC,EAAGC,SAASF,GACbG,aAChB,CAAE,MACE,OAAO,CACX,CACJ,CAKO,iBAAOC,CAAWC,GACrB,IAEI,OADaJ,EAAGC,SAASG,GACbC,QAChB,CAAE,MACE,OAAO,CACX,CACJ,CAKO,sBAAOC,CAAgBP,GAC1B,IAII,OAHK/E,KAAK8E,gBAAgBC,IACtBC,EAAGO,UAAUR,EAAS,CAAES,WAAW,KAEhC,CACX,CAAE,MAAOjB,GAEL,OADAvC,QAAQuC,MAAM,WAAWQ,IAAWR,IAC7B,CACX,CACJ,CAKO,wBAAOkB,CAAkBV,GAC5B,IAAK/E,KAAK8E,gBAAgBC,GACtB,MAAO,GAGX,IACI,OAAOC,EAAGU,YAAYX,GACjBY,OAAOlF,IACJ,MAAMmF,EAAWC,EAAKC,KAAKf,EAAStE,GACpC,OAAOT,KAAK8E,gBAAgBc,IAExC,CAAE,MACE,MAAO,EACX,CACJ,CAKO,eAAOG,CAAShB,GACnB,IAAK/E,KAAK8E,gBAAgBC,GACtB,MAAO,GAGX,IACI,OAAOC,EAAGU,YAAYX,GACjBY,OAAOlF,IACJ,MAAMmF,EAAWC,EAAKC,KAAKf,EAAStE,GACpC,OAAOT,KAAKmF,WAAWS,IAEnC,CAAE,MACE,MAAO,EACX,CACJ,CAKO,0BAAOI,CAAoBjB,GAC9B,IAAK/E,KAAK8E,gBAAgBC,GACtB,MAAO,GAGX,MAAMkB,EAAkB,GAExB,IACI,MAAMrG,EAAQoF,EAAGU,YAAYX,GAE7B,IAAK,MAAMtE,KAAQb,EAAO,CACtB,MAAMgG,EAAWC,EAAKC,KAAKf,EAAStE,GAC9ByF,EAAOlB,EAAGC,SAASW,GAErBM,EAAKb,SACLY,EAAM1D,KAAKqD,GACJM,EAAKhB,eACZe,EAAM1D,QAAQvC,KAAKgG,oBAAoBJ,GAE/C,CACJ,CAAE,MAEF,CAEA,OAAOK,CACX,CAKO,sBAAOE,CAAgBf,GAC1B,IACI,OAAOJ,EAAGoB,aAAahB,EAAU,OACrC,CAAE,MACE,OAAO,IACX,CACJ,CAKO,uBAAOiB,CAAiBjB,EAAkBkB,GAC7C,IAEI,MAAMC,EAAMV,EAAKW,QAAQpB,GAMzB,OALKpF,KAAK8E,gBAAgByB,IACtBvB,EAAGO,UAAUgB,EAAK,CAAEf,WAAW,IAGnCR,EAAGyB,cAAcrB,EAAUkB,EAAS,SAC7B,CACX,CAAE,MACE,OAAO,CACX,CACJ,CAKO,eAAOI,CAASC,EAAoBC,GACvC,IAEI,MAAMC,EAAYhB,EAAKW,QAAQI,GAM/B,OALK5G,KAAK8E,gBAAgB+B,IACtB7B,EAAGO,UAAUsB,EAAW,CAAErB,WAAW,IAGzCR,EAAG8B,aAAaH,EAAYC,IACrB,CACX,CAAE,MACE,OAAO,CACX,CACJ,CAKO,2BAAOG,CAAqBC,EAAmBH,GAClD,IACI,MAAMZ,EAAQjG,KAAKgG,oBAAoBgB,GAEvC,IAAK,MAAMC,KAAQhB,EAAO,CACtB,MAAMiB,EAAWrB,EAAKsB,SAASF,GACzBL,EAAaf,EAAKC,KAAKe,EAAWK,GAExC,IAAKlH,KAAK0G,SAASO,EAAML,GACrB,OAAO,CAEf,CAEA,OAAO,CACX,CAAE,MACE,OAAO,CACX,CACJ,CAQO,iCAAOQ,CAA2BJ,EAAmBH,GACxD,IACI,IAAK7G,KAAK8E,gBAAgBkC,GACtB,OAAO,EAGX,MAAMpH,EAAQoF,EAAGU,YAAYsB,GAE7B,IAAK,MAAMvG,KAAQb,EAAO,CACtB,MAAM+G,EAAad,EAAKC,KAAKkB,EAAWvG,GAClCmG,EAAaf,EAAKC,KAAKe,EAAWpG,GAClCyF,EAAOlB,EAAGC,SAAS0B,GAEzB,GAAIT,EAAKb,UAEL,IAAKrF,KAAK0G,SAASC,EAAYC,GAC3B,OAAO,OAER,GAAIV,EAAKhB,gBAEPlF,KAAK8E,gBAAgB8B,IACtB5B,EAAGO,UAAUqB,EAAY,CAAEpB,WAAW,KAErCxF,KAAKoH,2BAA2BT,EAAYC,IAC7C,OAAO,CAGnB,CAEA,OAAO,CACX,CAAE,MAAOrC,GAEL,OADAvC,QAAQuC,MAAM,UAAWA,IAClB,CACX,CACJ,CAKO,yBAAO8C,CAAmBjC,GAC7B,OAAOS,EAAKW,QAAQpB,EACxB,CAKO,qBAAOkC,CAAezD,GACzB,OAAOA,EAAI0D,MACf,E,43BC9OJ,kBACA,YACA,SACA,SACA,SAKA,wBAIW,2BAAajD,GAChB,MAAMkD,EAAe,EAAA1E,cAAc2E,4BACnC,IAAKD,EAED,YADA,EAAAtE,QAAQhE,UAAU,gBAItB,MAAMwI,EAAYF,EAAaG,OAC/B,IAAK,EAAAC,gBAAgB9C,gBAAgB4C,GAEjC,YADA,EAAAxE,QAAQhE,UAAU,eAKtB,MAAM2I,EAASzI,EAAOC,OAAOyI,iBAC7B,IAAKD,EAED,YADA,EAAA3E,QAAQhE,UAAU,YAKtB,MAAM6I,EAAkBF,EAAOG,SAASd,SAClCe,EAAgBpC,EAAKqC,QAAQH,GAC7B7H,EAAgB+H,EAAgBA,EAAcE,UAAU,QAAKlH,EAG7DmH,EAAU,EAAAR,gBAAgBnC,kBAAkBiC,GAClD,GAAuB,IAAnBU,EAAQtI,OAER,YADA,EAAAoD,QAAQhE,UAAU,oBAItB,MAAMmJ,QAAoB,EAAAnF,QAAQjD,wBAC9BmI,EACAlI,EACA,UAASA,EAAgB,YAAYA,KAAmB,KAE5D,IAAKmI,EACD,OAIJ,MAAMC,EAAkBzC,EAAKC,KAAK4B,EAAWW,GACvCE,EAAgB,EAAAX,gBAAgB7B,SAASuC,GAC/C,GAA6B,IAAzBC,EAAczI,OAEd,YADA,EAAAoD,QAAQhE,UAAU,iBAItB,MAAMsJ,QAAqB,EAAAtF,QAAQvD,cAAc4I,EAAe,UAChE,IAAKC,EACD,OAIJ,MAAMC,EAAmB5C,EAAKC,KAAKwC,EAAiBE,GAC9ClC,EAAU,EAAAsB,gBAAgBzB,gBAAgBsC,GAChC,OAAZnC,SAMEuB,EAAOa,KAAKC,IACdA,EAAYhB,OAAOE,EAAO/G,UAAU8H,OAAQtC,KAGhD,EAAApD,QAAQ3D,SAAS,YATb,EAAA2D,QAAQhE,UAAU,aAU1B,CAKO,2BAAasF,CAAeqE,GAC/B,MAAMrB,EAAe,EAAA1E,cAAc2E,4BACnC,IAAKD,EAED,YADA,EAAAtE,QAAQhE,UAAU,gBAItB,MAAM4J,EAAYtB,EAAauB,OAC/B,IAAK,EAAAnB,gBAAgB9C,gBAAgBgE,GAEjC,YADA,EAAA5F,QAAQhE,UAAU,eAKtB,IAAI0H,EACJ,IAAIiC,EAWA,YADA,EAAA3F,QAAQhE,UAAU,kBAVP,CACX,MAAM8J,EAAe,EAAApB,gBAAgBN,eAAeuB,GAGhDjC,EAFA,EAAAgB,gBAAgBzC,WAAW6D,GAEd,EAAApB,gBAAgBP,mBAAmB2B,GAGnCA,CAErB,CAMA,MAAMZ,EAAU,EAAAR,gBAAgBnC,kBAAkBqD,GAClD,GAAuB,IAAnBV,EAAQtI,OAER,YADA,EAAAoD,QAAQhE,UAAU,mBAItB,MAAMmJ,QAAoB,EAAAnF,QAAQvD,cAAcyI,EAAS,cACzD,IAAKC,EACD,OAIJ,MAAMrB,EAAYnB,EAAKC,KAAKgD,EAAWT,GACvB,EAAAT,gBAAgBR,2BAA2BJ,EAAWJ,GAGlE,EAAA1D,QAAQ3D,SAAS,aAAaqH,aAE9B,EAAA1D,QAAQhE,UAAU,SAE1B,CAKO,0BAAauF,CAAcoE,GAC9B,MAAMrB,EAAe,EAAA1E,cAAc2E,4BACnC,IAAKD,EAED,YADA,EAAAtE,QAAQhE,UAAU,gBAItB,MAAM+J,EAASzB,EAAa0B,IAC5B,IAAK,EAAAtB,gBAAgB9C,gBAAgBmE,GAEjC,YADA,EAAA/F,QAAQhE,UAAU,YAKtB,IAAI0H,EACJ,IAAIiC,EAWA,YADA,EAAA3F,QAAQhE,UAAU,kBAVP,CACX,MAAM8J,EAAe,EAAApB,gBAAgBN,eAAeuB,GAGhDjC,EAFA,EAAAgB,gBAAgBzC,WAAW6D,GAEd,EAAApB,gBAAgBP,mBAAmB2B,GAGnCA,CAErB,CAMA,MAAMT,EAAgB,EAAAX,gBAAgB7B,SAASkD,GAC/C,GAA6B,IAAzBV,EAAczI,OAEd,YADA,EAAAoD,QAAQhE,UAAU,gBAItB,MAAMsJ,QAAqB,EAAAtF,QAAQvD,cAAc4I,EAAe,UAChE,IAAKC,EACD,OAIJ,MAAMtB,QAAiB,EAAAhE,QAAQ9B,aAAa,SAAU,kBACtD,IAAK8F,EACD,OAIJ,MACMiC,EAAcjC,EADArB,EAAKqC,QAAQM,GAE3BY,EAAcvD,EAAKC,KAAKc,EAAYuC,GAG1C,GAAI,EAAAvB,gBAAgBzC,WAAWiE,WACH,EAAAlG,QAAQtB,kBAAkB,MAAMuH,eAEpD,OAKR,MAAMV,EAAmB5C,EAAKC,KAAKmD,EAAQT,GAG3C,GAFgB,EAAAZ,gBAAgBlB,SAAS+B,EAAkBW,GAE9C,CACT,EAAAlG,QAAQ3D,SAAS,WAAW4J,KAE5B,MAAMnB,QAAiB5I,EAAOqD,UAAU4G,iBAAiBD,SACnDhK,EAAOC,OAAOiK,iBAAiBtB,EACzC,MACI,EAAA9E,QAAQhE,UAAU,UAE1B,CAKO,4BAAa0F,GAChB,MAAM/B,EAAe,EAAAC,cAAcC,kBACnC,IAAKF,EAED,YADA,EAAAK,QAAQhE,UAAU,WAItB,IAAK,EAAA4D,cAAcE,qBAAqBH,GAEpC,YADA,EAAAK,QAAQhE,UAAU,UAKtB,MAAM2E,EAAMzE,EAAOmK,IAAItC,KAAKpE,SACtBzD,EAAOqE,SAAS+F,eAAe,oBAAqB3F,EAAK,CAAE4F,gBAAgB,GACrF,CAKO,2BAAa5E,GAChB,MAAM2C,EAAe,EAAA1E,cAAc2E,4BACnC,IAAKD,EAED,YADA,EAAAtE,QAAQhE,UAAU,gBAItB,MAAMwI,EAAYF,EAAaG,OAC/B,IAAK,EAAAC,gBAAgB9C,gBAAgB4C,GAEjC,YADA,EAAAxE,QAAQhE,UAAU,eAKtB,MAAM2I,EAASzI,EAAOC,OAAOyI,iBAC7B,IAAKD,EAED,YADA,EAAA3E,QAAQhE,UAAU,YAKtB,MAAM4B,EAAY+G,EAAO/G,UACzB,GAAIA,EAAU4I,QAEV,YADA,EAAAxG,QAAQhE,UAAU,iBAItB,MAAMyK,EAAe9B,EAAOG,SAAS4B,QAAQ9I,GAC7C,IAAK6I,EAAaE,OAEd,YADA,EAAA3G,QAAQhE,UAAU,aAKtB,MAAM6I,EAAkBF,EAAOG,SAASd,SAClCe,EAAgBpC,EAAKqC,QAAQH,GAC7B+B,EAAa7B,EAAgBA,EAAcE,UAAU,QAAKlH,EAG1DmH,EAAU,EAAAR,gBAAgBnC,kBAAkBiC,GAClD,GAAuB,IAAnBU,EAAQtI,OAER,YADA,EAAAoD,QAAQhE,UAAU,gCAKtB,MAAM6K,QAAuB,EAAA7G,QAAQjD,wBACjCmI,EACA0B,EACA,YAAWA,EAAa,YAAYA,KAAgB,KAExD,IAAKC,EACD,OAIJ,MAAM7C,QAAiB,EAAAhE,QAAQ9B,aAC3B,kBACA,WAEJ,IAAK8F,EACD,OAIJ,MAAM8C,EAAmB9C,GAAYe,GAAiB,QAChDQ,EAAmB5C,EAAKC,KAAK4B,EAAWqC,EAAgBC,GAG1D,EAAApC,gBAAgBzC,WAAWsD,WACH,EAAAvF,QAAQtB,kBAAkB,QAAQoI,iBAO9C,EAAApC,gBAAgBvB,iBAAiBoC,EAAkBkB,GAG/D,EAAAzG,QAAQ3D,SAAS,YAAYwK,KAAkBC,KAE/C,EAAA9G,QAAQhE,UAAU,YAE1B,E,03BClUJ,kBACA,YACA,YACA,SACA,SAKA,sBACY+K,sBAAiC,mBACjCA,yBAAoC,eAKrC,sBAAOlH,GAEV,OADe3D,EAAOqD,UAAUyH,iBAAiBlK,KAAKmK,gBACxCC,IAAYpK,KAAKqK,kBACnC,CAKO,4BAAaC,CAAgBzH,GAChC,MAAM0H,EAASnL,EAAOqD,UAAUyH,iBAAiBlK,KAAKmK,sBAChDI,EAAOC,OAAOxK,KAAKqK,kBAAmBxH,EAAczD,EAAOqL,oBAAoBC,OACzF,CAKO,2BAAO1H,CAAqBH,GAC/B,IAAKA,EACD,OAAO,EAGX,IAEI,OADamC,EAAGC,SAASpC,GACbqC,aAChB,CAAE,MACE,OAAO,CACX,CACJ,CAKO,gCAAOuC,GACV,MAAM5E,EAAe7C,KAAK+C,kBAC1B,OAAKF,GAAiB7C,KAAKgD,qBAAqBH,GAIzC,CACHkG,OAAQlD,EAAKC,KAAKjD,EAAc,UAChC8E,OAAQ9B,EAAKC,KAAKjD,EAAc,UAChCqG,IAAKrD,EAAKC,KAAKjD,EAAc,QANtB,IAQf,CAKO,mCAAOI,GACV,MAAMJ,EAAe7C,KAAK+C,kBAC1B,IAAKF,EACD,OAAO,EAIX,IAAK7C,KAAKgD,qBAAqBH,KACtB,EAAA+E,gBAAgBtC,gBAAgBzC,GAEjC,OADA,EAAAK,QAAQhE,UAAU,cAAc2D,MACzB,EAKf,MAAM8H,EAAe,CAAC,SAAU,SAAU,OACpCC,EAAwB,GAC9B,IAAIC,GAAa,EAEjB,IAAK,MAAMC,KAAWH,EAAc,CAChC,MAAM5F,EAAUc,EAAKC,KAAKjD,EAAciI,GACnC,EAAAlD,gBAAgB9C,gBAAgBC,KAC7B,EAAA6C,gBAAgBtC,gBAAgBP,GAChC6F,EAAYrI,KAAKuI,IAEjB,EAAA5H,QAAQhE,UAAU,WAAW6F,KAC7B8F,GAAa,GAGzB,CAOA,OAJID,EAAY9K,OAAS,GACrB,EAAAoD,QAAQ3D,SAAS,cAAcqL,EAAY9E,KAAK,SAG7C+E,CACX,CAKO,yBAAalG,SACVvF,EAAOqE,SAAS+F,eAAe,gCAAiCxJ,KAAKmK,eAC/E,E,UC5GJ9G,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,63BCAzB,kBAKA,yBACYwH,cAER,WAAAC,GACIhL,KAAK+K,cAAgB3L,EAAOC,OAAO4L,oBAC/B7L,EAAO8L,mBAAmBC,MAC1B,KAEJnL,KAAKoL,oBACT,CAKQ,kBAAAA,GACJpL,KAAK+K,cAAcM,KAAO,kBAC1BrL,KAAK+K,cAAcO,QAAU,SAC7BtL,KAAK+K,cAAcQ,QAAU,uBAC7BvL,KAAK+K,cAAc5J,MACvB,CAKO,IAAAA,GACHnB,KAAK+K,cAAc5J,MACvB,CAKO,IAAAJ,GACHf,KAAK+K,cAAchK,MACvB,CAKO,OAAAG,GACHlB,KAAK+K,cAAc7J,SACvB,E,GC5CAsK,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqB1K,IAAjB2K,EACH,OAAOA,EAAatI,QAGrB,IAAID,EAASmI,EAAyBG,GAAY,CAGjDrI,QAAS,CAAC,GAOX,OAHAuI,EAAoBF,GAAUG,KAAKzI,EAAOC,QAASD,EAAQA,EAAOC,QAASoI,GAGpErI,EAAOC,OACf,CCnB0BoI,CAAoB,K","sources":["webpack://vs-file-template/./src/utils/UIUtils.ts","webpack://vs-file-template/./src/extension.ts","webpack://vs-file-template/external commonjs \"vscode\"","webpack://vs-file-template/./src/commands/CommandHandler.ts","webpack://vs-file-template/./src/utils/FileSystemUtils.ts","webpack://vs-file-template/./src/services/TemplateService.ts","webpack://vs-file-template/./src/config/Configuration.ts","webpack://vs-file-template/external node-commonjs \"fs\"","webpack://vs-file-template/external node-commonjs \"path\"","webpack://vs-file-template/./src/ui/StatusBarManager.ts","webpack://vs-file-template/webpack/bootstrap","webpack://vs-file-template/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\n\r\n/**\r\n * UI工具类 - 处理用户界面交互\r\n */\r\nexport class UIUtils {\r\n    /**\r\n     * 显示错误消息\r\n     */\r\n    public static showError(message: string): void {\r\n        vscode.window.showErrorMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示信息消息\r\n     */\r\n    public static showInfo(message: string): void {\r\n        vscode.window.showInformationMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示警告消息\r\n     */\r\n    public static showWarning(message: string): void {\r\n        vscode.window.showWarningMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示选择列表\r\n     */\r\n    public static async showQuickPick(items: string[], placeholder?: string): Promise<string | undefined> {\r\n        if (items.length === 0) {\r\n            this.showWarning('没有可选项');\r\n            return undefined;\r\n        }\r\n\r\n        return await vscode.window.showQuickPick(items, {\r\n            placeHolder: placeholder || '请选择一个选项'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示带有默认筛选值的选择列表\r\n     * 使用createQuickPick API来实现默认输入值\r\n     */\r\n    public static async showQuickPickWithFilter(items: string[], defaultFilter?: string, placeholder?: string): Promise<string | undefined> {\r\n        if (items.length === 0) {\r\n            this.showWarning('没有可选项');\r\n            return undefined;\r\n        }\r\n\r\n        return new Promise<string | undefined>((resolve) => {\r\n            const quickPick = vscode.window.createQuickPick();\r\n            \r\n            // 转换为QuickPickItem格式\r\n            const quickPickItems: vscode.QuickPickItem[] = items.map(item => ({\r\n                label: item,\r\n                description: ''\r\n            }));\r\n            \r\n            quickPick.items = quickPickItems;\r\n            quickPick.placeholder = placeholder || '请选择一个选项';\r\n            \r\n            // 设置默认筛选值\r\n            if (defaultFilter) {\r\n                quickPick.value = defaultFilter;\r\n            }\r\n            \r\n            quickPick.onDidChangeSelection(selection => {\r\n                if (selection[0]) {\r\n                    resolve(selection[0].label);\r\n                    quickPick.hide();\r\n                }\r\n            });\r\n            \r\n            quickPick.onDidHide(() => {\r\n                resolve(undefined);\r\n                quickPick.dispose();\r\n            });\r\n            \r\n            quickPick.show();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示输入框\r\n     */\r\n    public static async showInputBox(placeholder?: string, prompt?: string): Promise<string | undefined> {\r\n        return await vscode.window.showInputBox({\r\n            placeHolder: placeholder,\r\n            prompt: prompt\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示文件夹选择对话框\r\n     */\r\n    public static async showOpenDialog(title?: string): Promise<vscode.Uri | undefined> {\r\n        const result = await vscode.window.showOpenDialog({\r\n            canSelectFiles: false,\r\n            canSelectFolders: true,\r\n            canSelectMany: false,\r\n            title: title || '选择文件夹'\r\n        });\r\n\r\n        return result?.[0];\r\n    }\r\n\r\n    /**\r\n     * 显示确认对话框\r\n     */\r\n    public static async showConfirmDialog(message: string): Promise<boolean> {\r\n        const result = await vscode.window.showInformationMessage(\r\n            message,\r\n            { modal: true },\r\n            '确定',\r\n            '取消'\r\n        );\r\n        \r\n        return result === '确定';\r\n    }\r\n\r\n    /**\r\n     * 显示操作选择菜单\r\n     */\r\n    public static async showActionMenu(): Promise<string | undefined> {\r\n        const actions = [\r\n            '配置模板路径',\r\n            '管理模板'\r\n        ];\r\n\r\n        return await this.showQuickPick(actions, '选择操作');\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\nimport { CommandHandler } from './commands/CommandHandler';\nimport { StatusBarManager } from './ui/StatusBarManager';\nimport { Configuration } from './config/Configuration';\nimport { UIUtils } from './utils/UIUtils';\n\nlet statusBarManager: StatusBarManager;\n\n/**\n * 扩展激活时调用\n */\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('文件模板插件已激活');\n\n    // 注册所有命令\n    CommandHandler.registerCommands(context);\n\n    // 创建状态栏管理器\n    statusBarManager = new StatusBarManager();\n    context.subscriptions.push({\n        dispose: () => statusBarManager.dispose()\n    });\n\n    // 注册配置变化监听器\n    const configChangeListener = vscode.workspace.onDidChangeConfiguration(event => {\n        if (event.affectsConfiguration('vs-file-template.templatePath')) {\n            handleTemplatePathChanged();\n        }\n    });\n    context.subscriptions.push(configChangeListener);\n\n    // 检查模板路径配置\n    checkTemplateConfiguration();\n\n    UIUtils.showInfo('文件模板插件已启动');\n}\n\n/**\n * 扩展停用时调用\n */\nexport function deactivate() {\n    if (statusBarManager) {\n        statusBarManager.dispose();\n    }\n    console.log('文件模板插件已停用');\n}\n\n/**\n * 检查模板配置\n */\nfunction checkTemplateConfiguration(): void {\n    const templatePath = Configuration.getTemplatePath();\n    \n    if (!templatePath) {\n        UIUtils.showWarning('尚未配置模板路径，请先配置模板路径');\n        return;\n    }\n\n    if (!Configuration.validateTemplatePath(templatePath)) {\n        UIUtils.showWarning('配置的模板路径无效，请检查路径是否存在');\n        return;\n    }\n\n    // 确保必需的子目录存在\n    Configuration.ensureTemplateSubDirectories();\n\n    console.log(`模板路径已配置: ${templatePath}`);\n}\n\n/**\n * 处理模板路径配置变化\n */\nfunction handleTemplatePathChanged(): void {\n    console.log('模板路径配置已变化，检查目录结构...');\n    \n    const templatePath = Configuration.getTemplatePath();\n    \n    if (!templatePath) {\n        UIUtils.showWarning('模板路径已清空');\n        return;\n    }\n\n    if (!Configuration.validateTemplatePath(templatePath)) {\n        UIUtils.showWarning('新配置的模板路径无效，请检查路径是否存在');\n        return;\n    }\n\n    // 检查并创建必需的子目录\n    const success = Configuration.ensureTemplateSubDirectories();\n    if (success) {\n        console.log(`模板路径已更新: ${templatePath}`);\n    }\n}\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { TemplateService } from '../services/TemplateService';\r\nimport { Configuration } from '../config/Configuration';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 命令处理器类 - 处理各种命令的执行\r\n */\r\nexport class CommandHandler {\r\n    /**\r\n     * 注册所有命令\r\n     */\r\n    public static registerCommands(context: vscode.ExtensionContext): void {\r\n        // 注册插入模板命令\r\n        const insertCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.insert',\r\n            () => this.handleInsertCommand()\r\n        );\r\n\r\n        // 注册导入模板命令\r\n        const importCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.import',\r\n            (uri: vscode.Uri) => this.handleImportCommand(uri)\r\n        );\r\n\r\n        // 注册新建文件命令\r\n        const newCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.new',\r\n            (uri: vscode.Uri) => this.handleNewCommand(uri)\r\n        );\r\n\r\n        // 注册状态栏按钮命令\r\n        const btnCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.btn',\r\n            () => this.handleBtnCommand()\r\n        );\r\n\r\n        // 注册添加到insert目录命令\r\n        const addToInsertCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.addToInsertDir',\r\n            () => this.handleAddToInsertDirCommand()\r\n        );\r\n\r\n        // 添加到订阅列表\r\n        context.subscriptions.push(insertCommand, importCommand, newCommand, btnCommand, addToInsertCommand);\r\n    }\r\n\r\n    /**\r\n     * 处理插入模板命令\r\n     */\r\n    private static async handleInsertCommand(): Promise<void> {\r\n        try {\r\n            await TemplateService.insertTemplate();\r\n        } catch (error) {\r\n            UIUtils.showError(`插入模板失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理导入模板命令\r\n     */\r\n    private static async handleImportCommand(uri: vscode.Uri): Promise<void> {\r\n        try {\r\n            await TemplateService.importTemplate(uri);\r\n        } catch (error) {\r\n            UIUtils.showError(`导入模板失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理新建文件命令\r\n     */\r\n    private static async handleNewCommand(uri: vscode.Uri): Promise<void> {\r\n        try {\r\n            await TemplateService.createNewFile(uri);\r\n        } catch (error) {\r\n            UIUtils.showError(`创建新文件失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理状态栏按钮命令\r\n     */\r\n    private static async handleBtnCommand(): Promise<void> {\r\n        try {\r\n            const action = await UIUtils.showActionMenu();\r\n            if (!action) {\r\n                return;\r\n            }\r\n\r\n            switch (action) {\r\n                case '配置模板路径':\r\n                    await Configuration.openSettings();\r\n                    break;\r\n                case '管理模板':\r\n                    await TemplateService.manageTemplates();\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            UIUtils.showError(`执行操作失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理添加到insert目录命令\r\n     */\r\n    private static async handleAddToInsertDirCommand(): Promise<void> {\r\n        try {\r\n            await TemplateService.addToInsertDir();\r\n        } catch (error) {\r\n            UIUtils.showError(`添加模板失败: ${error}`);\r\n        }\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * 文件系统工具类 - 处理文件和目录操作\r\n */\r\nexport class FileSystemUtils {\r\n    /**\r\n     * 检查目录是否存在\r\n     */\r\n    public static directoryExists(dirPath: string): boolean {\r\n        try {\r\n            const stat = fs.statSync(dirPath);\r\n            return stat.isDirectory();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查文件是否存在\r\n     */\r\n    public static fileExists(filePath: string): boolean {\r\n        try {\r\n            const stat = fs.statSync(filePath);\r\n            return stat.isFile();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建目录（如果不存在）\r\n     */\r\n    public static createDirectory(dirPath: string): boolean {\r\n        try {\r\n            if (!this.directoryExists(dirPath)) {\r\n                fs.mkdirSync(dirPath, { recursive: true });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`创建目录失败: ${dirPath}`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 读取目录下的所有子目录\r\n     */\r\n    public static getSubDirectories(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            return fs.readdirSync(dirPath)\r\n                .filter(item => {\r\n                    const fullPath = path.join(dirPath, item);\r\n                    return this.directoryExists(fullPath);\r\n                });\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 读取目录下的所有文件\r\n     */\r\n    public static getFiles(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            return fs.readdirSync(dirPath)\r\n                .filter(item => {\r\n                    const fullPath = path.join(dirPath, item);\r\n                    return this.fileExists(fullPath);\r\n                });\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归获取目录下的所有文件\r\n     */\r\n    public static getFilesRecursively(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        const files: string[] = [];\r\n        \r\n        try {\r\n            const items = fs.readdirSync(dirPath);\r\n            \r\n            for (const item of items) {\r\n                const fullPath = path.join(dirPath, item);\r\n                const stat = fs.statSync(fullPath);\r\n                \r\n                if (stat.isFile()) {\r\n                    files.push(fullPath);\r\n                } else if (stat.isDirectory()) {\r\n                    files.push(...this.getFilesRecursively(fullPath));\r\n                }\r\n            }\r\n        } catch {\r\n            // 忽略错误\r\n        }\r\n\r\n        return files;\r\n    }\r\n\r\n    /**\r\n     * 读取文件内容\r\n     */\r\n    public static readFileContent(filePath: string): string | null {\r\n        try {\r\n            return fs.readFileSync(filePath, 'utf8');\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 写入文件内容\r\n     */\r\n    public static writeFileContent(filePath: string, content: string): boolean {\r\n        try {\r\n            // 确保目录存在\r\n            const dir = path.dirname(filePath);\r\n            if (!this.directoryExists(dir)) {\r\n                fs.mkdirSync(dir, { recursive: true });\r\n            }\r\n            \r\n            fs.writeFileSync(filePath, content, 'utf8');\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 复制文件\r\n     */\r\n    public static copyFile(sourcePath: string, targetPath: string): boolean {\r\n        try {\r\n            // 确保目标目录存在\r\n            const targetDir = path.dirname(targetPath);\r\n            if (!this.directoryExists(targetDir)) {\r\n                fs.mkdirSync(targetDir, { recursive: true });\r\n            }\r\n            \r\n            fs.copyFileSync(sourcePath, targetPath);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归复制目录下的所有文件（不包含目录结构）\r\n     */\r\n    public static copyFilesRecursively(sourceDir: string, targetDir: string): boolean {\r\n        try {\r\n            const files = this.getFilesRecursively(sourceDir);\r\n            \r\n            for (const file of files) {\r\n                const fileName = path.basename(file);\r\n                const targetPath = path.join(targetDir, fileName);\r\n                \r\n                if (!this.copyFile(file, targetPath)) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归复制目录并保留内部目录结构（不包含根目录本身）\r\n     * @param sourceDir 源目录路径\r\n     * @param targetDir 目标目录路径\r\n     * @returns 是否复制成功\r\n     */\r\n    public static copyDirectoryWithStructure(sourceDir: string, targetDir: string): boolean {\r\n        try {\r\n            if (!this.directoryExists(sourceDir)) {\r\n                return false;\r\n            }\r\n\r\n            const items = fs.readdirSync(sourceDir);\r\n            \r\n            for (const item of items) {\r\n                const sourcePath = path.join(sourceDir, item);\r\n                const targetPath = path.join(targetDir, item);\r\n                const stat = fs.statSync(sourcePath);\r\n                \r\n                if (stat.isFile()) {\r\n                    // 复制文件\r\n                    if (!this.copyFile(sourcePath, targetPath)) {\r\n                        return false;\r\n                    }\r\n                } else if (stat.isDirectory()) {\r\n                    // 递归复制子目录\r\n                    if (!this.directoryExists(targetPath)) {\r\n                        fs.mkdirSync(targetPath, { recursive: true });\r\n                    }\r\n                    if (!this.copyDirectoryWithStructure(sourcePath, targetPath)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('复制目录失败:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取文件或目录的父目录\r\n     */\r\n    public static getParentDirectory(filePath: string): string {\r\n        return path.dirname(filePath);\r\n    }\r\n\r\n    /**\r\n     * 从URI获取文件系统路径\r\n     */\r\n    public static getPathFromUri(uri: vscode.Uri): string {\r\n        return uri.fsPath;\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { Configuration } from '../config/Configuration';\r\nimport { FileSystemUtils } from '../utils/FileSystemUtils';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 模板服务类 - 核心业务逻辑\r\n */\r\nexport class TemplateService {\r\n    /**\r\n     * 插入模板内容到当前编辑器\r\n     */\r\n    public static async insertTemplate(): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const insertDir = templateDirs.insert;\r\n        if (!FileSystemUtils.directoryExists(insertDir)) {\r\n            UIUtils.showError('insert目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 获取当前活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            UIUtils.showError('没有打开的编辑器');\r\n            return;\r\n        }\r\n\r\n        // 获取当前文件的扩展名作为默认筛选器\r\n        const currentFileName = editor.document.fileName;\r\n        const fileExtension = path.extname(currentFileName);\r\n        const defaultFilter = fileExtension ? fileExtension.substring(1) : undefined; // 移除点号\r\n\r\n        // 选择模板类型文件夹\r\n        const subDirs = FileSystemUtils.getSubDirectories(insertDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('insert目录下没有模板文件夹');\r\n            return;\r\n        }\r\n\r\n        const selectedDir = await UIUtils.showQuickPickWithFilter(\r\n            subDirs, \r\n            defaultFilter, \r\n            `选择模板类型${defaultFilter ? ` (当前文件: .${defaultFilter})` : ''}`\r\n        );\r\n        if (!selectedDir) {\r\n            return;\r\n        }\r\n\r\n        // 选择具体模板文件\r\n        const templateDirPath = path.join(insertDir, selectedDir);\r\n        const templateFiles = FileSystemUtils.getFiles(templateDirPath);\r\n        if (templateFiles.length === 0) {\r\n            UIUtils.showError('所选模板类型下没有模板文件');\r\n            return;\r\n        }\r\n\r\n        const selectedFile = await UIUtils.showQuickPick(templateFiles, '选择模板文件');\r\n        if (!selectedFile) {\r\n            return;\r\n        }\r\n\r\n        // 读取模板内容并插入\r\n        const templateFilePath = path.join(templateDirPath, selectedFile);\r\n        const content = FileSystemUtils.readFileContent(templateFilePath);\r\n        if (content === null) {\r\n            UIUtils.showError('无法读取模板文件内容');\r\n            return;\r\n        }\r\n\r\n        // 在光标位置插入内容\r\n        await editor.edit(editBuilder => {\r\n            editBuilder.insert(editor.selection.active, content);\r\n        });\r\n\r\n        UIUtils.showInfo('模板内容已插入');\r\n    }\r\n\r\n    /**\r\n     * 导入模板目录到目标位置\r\n     */\r\n    public static async importTemplate(targetUri?: vscode.Uri): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const importDir = templateDirs.import;\r\n        if (!FileSystemUtils.directoryExists(importDir)) {\r\n            UIUtils.showError('import目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 确定目标目录\r\n        let targetPath: string;\r\n        if (targetUri) {\r\n            const resourcePath = FileSystemUtils.getPathFromUri(targetUri);\r\n            if (FileSystemUtils.fileExists(resourcePath)) {\r\n                // 如果是文件，使用其父目录\r\n                targetPath = FileSystemUtils.getParentDirectory(resourcePath);\r\n            } else {\r\n                // 如果是目录，直接使用\r\n                targetPath = resourcePath;\r\n            }\r\n        } else {\r\n            UIUtils.showError('请在资源管理器中选择目标位置');\r\n            return;\r\n        }\r\n\r\n        // 选择要导入的模板目录\r\n        const subDirs = FileSystemUtils.getSubDirectories(importDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('import目录下没有模板目录');\r\n            return;\r\n        }\r\n\r\n        const selectedDir = await UIUtils.showQuickPick(subDirs, '选择要导入的模板目录');\r\n        if (!selectedDir) {\r\n            return;\r\n        }\r\n\r\n        // 执行导入操作 - 保留内部目录结构\r\n        const sourceDir = path.join(importDir, selectedDir);\r\n        const success = FileSystemUtils.copyDirectoryWithStructure(sourceDir, targetPath);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已成功导入模板到: ${targetPath}（保留目录结构）`);\r\n        } else {\r\n            UIUtils.showError('导入模板失败');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建新文件从模板\r\n     */\r\n    public static async createNewFile(targetUri?: vscode.Uri): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const newDir = templateDirs.new;\r\n        if (!FileSystemUtils.directoryExists(newDir)) {\r\n            UIUtils.showError('new目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 确定目标目录\r\n        let targetPath: string;\r\n        if (targetUri) {\r\n            const resourcePath = FileSystemUtils.getPathFromUri(targetUri);\r\n            if (FileSystemUtils.fileExists(resourcePath)) {\r\n                // 如果是文件，使用其父目录\r\n                targetPath = FileSystemUtils.getParentDirectory(resourcePath);\r\n            } else {\r\n                // 如果是目录，直接使用\r\n                targetPath = resourcePath;\r\n            }\r\n        } else {\r\n            UIUtils.showError('请在资源管理器中选择目标位置');\r\n            return;\r\n        }\r\n\r\n        // 选择模板文件\r\n        const templateFiles = FileSystemUtils.getFiles(newDir);\r\n        if (templateFiles.length === 0) {\r\n            UIUtils.showError('new目录下没有模板文件');\r\n            return;\r\n        }\r\n\r\n        const selectedFile = await UIUtils.showQuickPick(templateFiles, '选择模板文件');\r\n        if (!selectedFile) {\r\n            return;\r\n        }\r\n\r\n        // 获取新文件名\r\n        const fileName = await UIUtils.showInputBox('输入新文件名', '请输入新文件名（不含扩展名）');\r\n        if (!fileName) {\r\n            return;\r\n        }\r\n\r\n        // 确定文件扩展名\r\n        const templateExt = path.extname(selectedFile);\r\n        const newFileName = fileName + templateExt;\r\n        const newFilePath = path.join(targetPath, newFileName);\r\n\r\n        // 检查文件是否已存在\r\n        if (FileSystemUtils.fileExists(newFilePath)) {\r\n            const overwrite = await UIUtils.showConfirmDialog(`文件 ${newFileName} 已存在，是否覆盖？`);\r\n            if (!overwrite) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 复制模板文件\r\n        const templateFilePath = path.join(newDir, selectedFile);\r\n        const success = FileSystemUtils.copyFile(templateFilePath, newFilePath);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已创建新文件: ${newFileName}`);\r\n            // 打开新创建的文件\r\n            const document = await vscode.workspace.openTextDocument(newFilePath);\r\n            await vscode.window.showTextDocument(document);\r\n        } else {\r\n            UIUtils.showError('创建新文件失败');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 管理模板 - 在新窗口中打开模板目录\r\n     */\r\n    public static async manageTemplates(): Promise<void> {\r\n        const templatePath = Configuration.getTemplatePath();\r\n        if (!templatePath) {\r\n            UIUtils.showError('未配置模板路径');\r\n            return;\r\n        }\r\n\r\n        if (!Configuration.validateTemplatePath(templatePath)) {\r\n            UIUtils.showError('模板路径无效');\r\n            return;\r\n        }\r\n\r\n        // 在新窗口中打开模板目录\r\n        const uri = vscode.Uri.file(templatePath);\r\n        await vscode.commands.executeCommand('vscode.openFolder', uri, { forceNewWindow: true });\r\n    }\r\n\r\n    /**\r\n     * 将当前选中的文本添加到insert模板目录\r\n     */\r\n    public static async addToInsertDir(): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const insertDir = templateDirs.insert;\r\n        if (!FileSystemUtils.directoryExists(insertDir)) {\r\n            UIUtils.showError('insert目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 获取当前活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            UIUtils.showError('没有打开的编辑器');\r\n            return;\r\n        }\r\n\r\n        // 获取选中的文本\r\n        const selection = editor.selection;\r\n        if (selection.isEmpty) {\r\n            UIUtils.showError('请先选中要保存为模板的文本');\r\n            return;\r\n        }\r\n\r\n        const selectedText = editor.document.getText(selection);\r\n        if (!selectedText.trim()) {\r\n            UIUtils.showError('选中的文本不能为空');\r\n            return;\r\n        }\r\n\r\n        // 获取当前文件的扩展名作为默认目录\r\n        const currentFileName = editor.document.fileName;\r\n        const fileExtension = path.extname(currentFileName);\r\n        const defaultDir = fileExtension ? fileExtension.substring(1) : undefined; // 移除点号\r\n\r\n        // 获取insert目录下的所有子目录\r\n        const subDirs = FileSystemUtils.getSubDirectories(insertDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('insert目录下没有子目录，请先创建相应的模板分类目录');\r\n            return;\r\n        }\r\n\r\n        // 选择目标子目录\r\n        const selectedSubDir = await UIUtils.showQuickPickWithFilter(\r\n            subDirs,\r\n            defaultDir,\r\n            `选择模板分类目录${defaultDir ? ` (当前文件: .${defaultDir})` : ''}`\r\n        );\r\n        if (!selectedSubDir) {\r\n            return;\r\n        }\r\n\r\n        // 输入文件名\r\n        const fileName = await UIUtils.showInputBox(\r\n            '请输入模板文件名（不含扩展名）',\r\n            '输入模板文件名'\r\n        );\r\n        if (!fileName) {\r\n            return;\r\n        }\r\n\r\n        // 确定文件扩展名（使用当前文件的扩展名）\r\n        const templateFileName = fileName + (fileExtension || '.txt');\r\n        const templateFilePath = path.join(insertDir, selectedSubDir, templateFileName);\r\n\r\n        // 检查文件是否已存在\r\n        if (FileSystemUtils.fileExists(templateFilePath)) {\r\n            const overwrite = await UIUtils.showConfirmDialog(`模板文件 ${templateFileName} 已存在，是否覆盖？`);\r\n            if (!overwrite) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 保存选中的文本到模板文件\r\n        const success = FileSystemUtils.writeFileContent(templateFilePath, selectedText);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已成功保存模板: ${selectedSubDir}/${templateFileName}`);\r\n        } else {\r\n            UIUtils.showError('保存模板文件失败');\r\n        }\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { FileSystemUtils } from '../utils/FileSystemUtils';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 配置管理类 - 负责管理插件的配置项\r\n */\r\nexport class Configuration {\r\n    private static readonly CONFIG_SECTION = 'vs-file-template';\r\n    private static readonly TEMPLATE_PATH_KEY = 'templatePath';\r\n\r\n    /**\r\n     * 获取模板路径配置\r\n     */\r\n    public static getTemplatePath(): string | undefined {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        return config.get<string>(this.TEMPLATE_PATH_KEY);\r\n    }\r\n\r\n    /**\r\n     * 设置模板路径配置\r\n     */\r\n    public static async setTemplatePath(templatePath: string): Promise<void> {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        await config.update(this.TEMPLATE_PATH_KEY, templatePath, vscode.ConfigurationTarget.Global);\r\n    }\r\n\r\n    /**\r\n     * 验证模板路径是否有效\r\n     */\r\n    public static validateTemplatePath(templatePath: string): boolean {\r\n        if (!templatePath) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const stat = fs.statSync(templatePath);\r\n            return stat.isDirectory();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取模板子目录路径\r\n     */\r\n    public static getTemplateSubDirectories(): { import: string; insert: string; new: string } | null {\r\n        const templatePath = this.getTemplatePath();\r\n        if (!templatePath || !this.validateTemplatePath(templatePath)) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            import: path.join(templatePath, 'import'),\r\n            insert: path.join(templatePath, 'insert'),\r\n            new: path.join(templatePath, 'new')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 检查并创建必需的模板子目录\r\n     */\r\n    public static ensureTemplateSubDirectories(): boolean {\r\n        const templatePath = this.getTemplatePath();\r\n        if (!templatePath) {\r\n            return false;\r\n        }\r\n\r\n        // 如果模板根目录不存在，先创建它\r\n        if (!this.validateTemplatePath(templatePath)) {\r\n            if (!FileSystemUtils.createDirectory(templatePath)) {\r\n                UIUtils.showError(`无法创建模板根目录: ${templatePath}`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 创建必需的子目录\r\n        const requiredDirs = ['import', 'insert', 'new'];\r\n        const createdDirs: string[] = [];\r\n        let allSuccess = true;\r\n\r\n        for (const dirName of requiredDirs) {\r\n            const dirPath = path.join(templatePath, dirName);\r\n            if (!FileSystemUtils.directoryExists(dirPath)) {\r\n                if (FileSystemUtils.createDirectory(dirPath)) {\r\n                    createdDirs.push(dirName);\r\n                } else {\r\n                    UIUtils.showError(`无法创建目录: ${dirPath}`);\r\n                    allSuccess = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 显示创建结果\r\n        if (createdDirs.length > 0) {\r\n            UIUtils.showInfo(`已自动创建模板目录: ${createdDirs.join(', ')}`);\r\n        }\r\n\r\n        return allSuccess;\r\n    }\r\n\r\n    /**\r\n     * 打开设置页面\r\n     */\r\n    public static async openSettings(): Promise<void> {\r\n        await vscode.commands.executeCommand('workbench.action.openSettings', this.CONFIG_SECTION);\r\n    }\r\n}\r\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import * as vscode from 'vscode';\r\n\r\n/**\r\n * 状态栏管理器 - 管理状态栏按钮\r\n */\r\nexport class StatusBarManager {\r\n    private statusBarItem: vscode.StatusBarItem;\r\n\r\n    constructor() {\r\n        this.statusBarItem = vscode.window.createStatusBarItem(\r\n            vscode.StatusBarAlignment.Right,\r\n            100\r\n        );\r\n        this.setupStatusBarItem();\r\n    }\r\n\r\n    /**\r\n     * 设置状态栏按钮\r\n     */\r\n    private setupStatusBarItem(): void {\r\n        this.statusBarItem.text = '$(file-code) 模板';\r\n        this.statusBarItem.tooltip = '文件模板管理';\r\n        this.statusBarItem.command = 'vs-file-template.btn';\r\n        this.statusBarItem.show();\r\n    }\r\n\r\n    /**\r\n     * 显示状态栏按钮\r\n     */\r\n    public show(): void {\r\n        this.statusBarItem.show();\r\n    }\r\n\r\n    /**\r\n     * 隐藏状态栏按钮\r\n     */\r\n    public hide(): void {\r\n        this.statusBarItem.hide();\r\n    }\r\n\r\n    /**\r\n     * 销毁状态栏按钮\r\n     */\r\n    public dispose(): void {\r\n        this.statusBarItem.dispose();\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["showError","message","vscode","window","showErrorMessage","showInfo","showInformationMessage","showWarning","showWarningMessage","showQuickPick","items","placeholder","length","placeHolder","this","showQuickPickWithFilter","defaultFilter","Promise","resolve","quickPick","createQuickPick","quickPickItems","map","item","label","description","value","onDidChangeSelection","selection","hide","onDidHide","undefined","dispose","show","showInputBox","prompt","showOpenDialog","title","result","canSelectFiles","canSelectFolders","canSelectMany","showConfirmDialog","modal","showActionMenu","context","console","log","CommandHandler","registerCommands","statusBarManager","StatusBarManager","subscriptions","push","configChangeListener","workspace","onDidChangeConfiguration","event","affectsConfiguration","templatePath","Configuration","getTemplatePath","validateTemplatePath","ensureTemplateSubDirectories","UIUtils","handleTemplatePathChanged","checkTemplateConfiguration","module","exports","require","insertCommand","commands","registerCommand","handleInsertCommand","importCommand","uri","handleImportCommand","newCommand","handleNewCommand","btnCommand","handleBtnCommand","addToInsertCommand","handleAddToInsertDirCommand","TemplateService","insertTemplate","error","importTemplate","createNewFile","action","openSettings","manageTemplates","addToInsertDir","directoryExists","dirPath","fs","statSync","isDirectory","fileExists","filePath","isFile","createDirectory","mkdirSync","recursive","getSubDirectories","readdirSync","filter","fullPath","path","join","getFiles","getFilesRecursively","files","stat","readFileContent","readFileSync","writeFileContent","content","dir","dirname","writeFileSync","copyFile","sourcePath","targetPath","targetDir","copyFileSync","copyFilesRecursively","sourceDir","file","fileName","basename","copyDirectoryWithStructure","getParentDirectory","getPathFromUri","fsPath","templateDirs","getTemplateSubDirectories","insertDir","insert","FileSystemUtils","editor","activeTextEditor","currentFileName","document","fileExtension","extname","substring","subDirs","selectedDir","templateDirPath","templateFiles","selectedFile","templateFilePath","edit","editBuilder","active","targetUri","importDir","import","resourcePath","newDir","new","newFileName","newFilePath","openTextDocument","showTextDocument","Uri","executeCommand","forceNewWindow","isEmpty","selectedText","getText","trim","defaultDir","selectedSubDir","templateFileName","static","getConfiguration","CONFIG_SECTION","get","TEMPLATE_PATH_KEY","setTemplatePath","config","update","ConfigurationTarget","Global","requiredDirs","createdDirs","allSuccess","dirName","statusBarItem","constructor","createStatusBarItem","StatusBarAlignment","Right","setupStatusBarItem","text","tooltip","command","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}