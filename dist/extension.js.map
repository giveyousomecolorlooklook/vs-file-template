{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vs-file-template/./src/utils/UIUtils.ts","webpack://vs-file-template/./src/extension.ts","webpack://vs-file-template/./src/providers/CodeLensProvider.ts","webpack://vs-file-template/external commonjs \"vscode\"","webpack://vs-file-template/./src/commands/CommandHandler.ts","webpack://vs-file-template/./src/utils/FileSystemUtils.ts","webpack://vs-file-template/./src/services/TemplateService.ts","webpack://vs-file-template/./src/config/Configuration.ts","webpack://vs-file-template/external node-commonjs \"fs\"","webpack://vs-file-template/external node-commonjs \"path\"","webpack://vs-file-template/./src/ui/StatusBarManager.ts","webpack://vs-file-template/webpack/bootstrap","webpack://vs-file-template/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { Configuration } from '../config/Configuration';\r\n\r\n/**\r\n * UI工具类 - 处理用户界面交互\r\n */\r\nexport class UIUtils {\r\n    /**\r\n     * 显示错误消息\r\n     */\r\n    public static showError(message: string): void {\r\n        vscode.window.showErrorMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示信息消息\r\n     */\r\n    public static showInfo(message: string): void {\r\n        vscode.window.showInformationMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示警告消息\r\n     */\r\n    public static showWarning(message: string): void {\r\n        vscode.window.showWarningMessage(`文件模板: ${message}`);\r\n    }\r\n\r\n    /**\r\n     * 显示选择列表\r\n     */\r\n    public static async showQuickPick(items: string[], placeholder?: string): Promise<string | undefined> {\r\n        if (items.length === 0) {\r\n            this.showWarning('没有可选项');\r\n            return undefined;\r\n        }\r\n\r\n        return await vscode.window.showQuickPick(items, {\r\n            placeHolder: placeholder || '请选择一个选项'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示带有默认筛选值的选择列表\r\n     * 使用createQuickPick API来实现默认输入值\r\n     */\r\n    public static async showQuickPickWithFilter(items: string[], defaultFilter?: string, placeholder?: string): Promise<string | undefined> {\r\n        if (items.length === 0) {\r\n            this.showWarning('没有可选项');\r\n            return undefined;\r\n        }\r\n\r\n        return new Promise<string | undefined>((resolve) => {\r\n            const quickPick = vscode.window.createQuickPick();\r\n            \r\n            // 转换为QuickPickItem格式\r\n            const quickPickItems: vscode.QuickPickItem[] = items.map(item => ({\r\n                label: item,\r\n                description: ''\r\n            }));\r\n            \r\n            quickPick.items = quickPickItems;\r\n            quickPick.placeholder = placeholder || '请选择一个选项';\r\n            \r\n            // 设置默认筛选值\r\n            if (defaultFilter) {\r\n                quickPick.value = defaultFilter;\r\n            }\r\n            \r\n            quickPick.onDidChangeSelection(selection => {\r\n                if (selection[0]) {\r\n                    resolve(selection[0].label);\r\n                    quickPick.hide();\r\n                }\r\n            });\r\n            \r\n            quickPick.onDidHide(() => {\r\n                resolve(undefined);\r\n                quickPick.dispose();\r\n            });\r\n            \r\n            quickPick.show();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示输入框\r\n     */\r\n    public static async showInputBox(placeholder?: string, prompt?: string): Promise<string | undefined> {\r\n        return await vscode.window.showInputBox({\r\n            placeHolder: placeholder,\r\n            prompt: prompt\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示文件夹选择对话框\r\n     */\r\n    public static async showOpenDialog(title?: string): Promise<vscode.Uri | undefined> {\r\n        const result = await vscode.window.showOpenDialog({\r\n            canSelectFiles: false,\r\n            canSelectFolders: true,\r\n            canSelectMany: false,\r\n            title: title || '选择文件夹'\r\n        });\r\n\r\n        return result?.[0];\r\n    }\r\n\r\n    /**\r\n     * 显示确认对话框\r\n     */\r\n    public static async showConfirmDialog(message: string): Promise<boolean> {\r\n        const result = await vscode.window.showInformationMessage(\r\n            message,\r\n            { modal: true },\r\n            '确定',\r\n            '取消'\r\n        );\r\n        \r\n        return result === '确定';\r\n    }\r\n\r\n    /**\r\n     * 显示操作选择菜单\r\n     */\r\n    public static async showActionMenu(): Promise<string | undefined> {\r\n        const codeLensEnabled = Configuration.getCodeLensEnabled();\r\n        const codeLensStatus = codeLensEnabled ? '禁用代码镜头' : '启用代码镜头';\r\n        \r\n        const actions = [\r\n            '配置模板路径',\r\n            '管理模板',\r\n            codeLensStatus\r\n        ];\r\n\r\n        return await this.showQuickPick(actions, '选择操作');\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\nimport { CommandHandler } from './commands/CommandHandler';\nimport { StatusBarManager } from './ui/StatusBarManager';\nimport { Configuration } from './config/Configuration';\nimport { UIUtils } from './utils/UIUtils';\nimport { TemplateCodeLensProvider } from './providers/CodeLensProvider';\n\nlet statusBarManager: StatusBarManager;\nlet codeLensProvider: TemplateCodeLensProvider;\n\n/**\n * 扩展激活时调用\n */\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('文件模板插件已激活');\n\n    // 注册所有命令\n    CommandHandler.registerCommands(context);\n\n    // 创建并注册CodeLens提供器\n    codeLensProvider = new TemplateCodeLensProvider();\n    const codeLensDisposable = vscode.languages.registerCodeLensProvider(\n        { scheme: 'file' }, // 支持所有文件类型\n        codeLensProvider\n    );\n    context.subscriptions.push(codeLensDisposable);\n\n    // 监听文本选择变化以刷新CodeLens\n    const selectionChangeListener = vscode.window.onDidChangeTextEditorSelection(() => {\n        codeLensProvider.refresh();\n    });\n    context.subscriptions.push(selectionChangeListener);\n\n    // 监听活动编辑器变化以刷新CodeLens\n    const activeEditorChangeListener = vscode.window.onDidChangeActiveTextEditor(() => {\n        codeLensProvider.refresh();\n    });\n    context.subscriptions.push(activeEditorChangeListener);\n\n    // 监听光标位置变化以刷新CodeLens\n    const cursorChangeListener = vscode.window.onDidChangeTextEditorSelection(() => {\n        codeLensProvider.refresh();\n    });\n    context.subscriptions.push(cursorChangeListener);\n\n    // 创建状态栏管理器\n    statusBarManager = new StatusBarManager();\n    context.subscriptions.push({\n        dispose: () => statusBarManager.dispose()\n    });\n\n    // 注册配置变化监听器\n    const configChangeListener = vscode.workspace.onDidChangeConfiguration(event => {\n        if (event.affectsConfiguration('vs-file-template.templatePath')) {\n            handleTemplatePathChanged();\n        }\n        if (event.affectsConfiguration('vs-file-template.enableCodeLens')) {\n            handleCodeLensConfigChanged();\n        }\n    });\n    context.subscriptions.push(configChangeListener);\n\n    // 检查模板路径配置\n    checkTemplateConfiguration();\n\n    UIUtils.showInfo('文件模板插件已启动');\n}\n\n/**\n * 扩展停用时调用\n */\nexport function deactivate() {\n    if (statusBarManager) {\n        statusBarManager.dispose();\n    }\n    if (codeLensProvider) {\n        // CodeLens提供器会通过context.subscriptions自动清理\n    }\n    console.log('文件模板插件已停用');\n}\n\n/**\n * 检查模板配置\n */\nfunction checkTemplateConfiguration(): void {\n    const templatePath = Configuration.getTemplatePath();\n    \n    if (!templatePath) {\n        UIUtils.showWarning('尚未配置模板路径，请先配置模板路径');\n        return;\n    }\n\n    if (!Configuration.validateTemplatePath(templatePath)) {\n        UIUtils.showWarning('配置的模板路径无效，请检查路径是否存在');\n        return;\n    }\n\n    // 确保必需的子目录存在\n    Configuration.ensureTemplateSubDirectories();\n\n    console.log(`模板路径已配置: ${templatePath}`);\n}\n\n/**\n * 处理模板路径配置变化\n */\nfunction handleTemplatePathChanged(): void {\n    console.log('模板路径配置已变化，检查目录结构...');\n    \n    const templatePath = Configuration.getTemplatePath();\n    \n    if (!templatePath) {\n        UIUtils.showWarning('模板路径已清空');\n        return;\n    }\n\n    if (!Configuration.validateTemplatePath(templatePath)) {\n        UIUtils.showWarning('新配置的模板路径无效，请检查路径是否存在');\n        return;\n    }\n\n    // 检查并创建必需的子目录\n    const success = Configuration.ensureTemplateSubDirectories();\n    if (success) {\n        console.log(`模板路径已更新: ${templatePath}`);\n    }\n}\n\n/**\n * 处理CodeLens配置变化\n */\nfunction handleCodeLensConfigChanged(): void {\n    console.log('CodeLens配置已变化，刷新CodeLens...');\n    if (codeLensProvider) {\n        codeLensProvider.refresh();\n    }\n}\n","import * as vscode from 'vscode';\r\nimport { Configuration } from '../config/Configuration';\r\n\r\n/**\r\n * CodeLens提供器 - 在代码编辑器中显示模板相关的快捷操作\r\n */\r\nexport class TemplateCodeLensProvider implements vscode.CodeLensProvider {\r\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();\r\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event;\r\n\r\n    constructor() {}\r\n\r\n    public provideCodeLenses(\r\n        document: vscode.TextDocument,\r\n        token: vscode.CancellationToken\r\n    ): vscode.CodeLens[] | Thenable<vscode.CodeLens[]> {\r\n        const codeLenses: vscode.CodeLens[] = [];\r\n\r\n        // 检查CodeLens是否启用\r\n        if (!Configuration.getCodeLensEnabled()) {\r\n            return codeLenses;\r\n        }\r\n\r\n        // 只在文本文件中显示CodeLens\r\n        if (document.uri.scheme !== 'file') {\r\n            return codeLenses;\r\n        }\r\n\r\n        // 获取当前编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor || editor.document !== document) {\r\n            return codeLenses;\r\n        }\r\n\r\n        // 在光标所在行显示CodeLens\r\n        const cursorLine = editor.selection.active.line;\r\n        const cursorPosition = new vscode.Range(cursorLine, 0, cursorLine, 0);\r\n        \r\n        // \"从模板插入\" CodeLens - 始终显示\r\n        const insertCodeLens = new vscode.CodeLens(cursorPosition, {\r\n            title: \"🔧 从模板插入\",\r\n            command: \"vs-file-template.insert\",\r\n            tooltip: \"在当前位置插入模板内容\"\r\n        });\r\n        codeLenses.push(insertCodeLens);\r\n        \r\n        // \"保存为模板\" CodeLens - 只在有选中内容时显示\r\n        if (!editor.selection.isEmpty) {\r\n            const addToTemplateCodeLens = new vscode.CodeLens(cursorPosition, {\r\n                title: \"💾 保存选中内容为模板\",\r\n                command: \"vs-file-template.addToInsertDir\",\r\n                tooltip: \"将选中的内容保存为模板\"\r\n            });\r\n            codeLenses.push(addToTemplateCodeLens);\r\n        }\r\n\r\n        return codeLenses;\r\n    }\r\n\r\n    public resolveCodeLens?(\r\n        codeLens: vscode.CodeLens,\r\n        token: vscode.CancellationToken\r\n    ): vscode.CodeLens | Thenable<vscode.CodeLens> {\r\n        return codeLens;\r\n    }\r\n\r\n    /**\r\n     * 刷新CodeLens\r\n     */\r\n    public refresh(): void {\r\n        this._onDidChangeCodeLenses.fire();\r\n    }\r\n}\r\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { TemplateService } from '../services/TemplateService';\r\nimport { Configuration } from '../config/Configuration';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 命令处理器类 - 处理各种命令的执行\r\n */\r\nexport class CommandHandler {\r\n    /**\r\n     * 注册所有命令\r\n     */\r\n    public static registerCommands(context: vscode.ExtensionContext): void {\r\n        // 注册插入模板命令\r\n        const insertCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.insert',\r\n            () => this.handleInsertCommand()\r\n        );\r\n\r\n        // 注册导入模板命令\r\n        const importCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.import',\r\n            (uri: vscode.Uri) => this.handleImportCommand(uri)\r\n        );\r\n\r\n        // 注册新建文件命令\r\n        const newCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.new',\r\n            (uri: vscode.Uri) => this.handleNewCommand(uri)\r\n        );\r\n\r\n        // 注册状态栏按钮命令\r\n        const btnCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.btn',\r\n            () => this.handleBtnCommand()\r\n        );\r\n\r\n        // 注册添加到insert目录命令\r\n        const addToInsertCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.addToInsertDir',\r\n            () => this.handleAddToInsertDirCommand()\r\n        );\r\n\r\n        // 注册切换CodeLens命令\r\n        const toggleCodeLensCommand = vscode.commands.registerCommand(\r\n            'vs-file-template.toggleCodeLens',\r\n            () => this.handleToggleCodeLensCommand()\r\n        );\r\n\r\n        // 添加到订阅列表\r\n        context.subscriptions.push(insertCommand, importCommand, newCommand, btnCommand, addToInsertCommand, toggleCodeLensCommand);\r\n    }\r\n\r\n    /**\r\n     * 处理插入模板命令\r\n     */\r\n    private static async handleInsertCommand(): Promise<void> {\r\n        try {\r\n            await TemplateService.insertTemplate();\r\n        } catch (error) {\r\n            UIUtils.showError(`插入模板失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理导入模板命令\r\n     */\r\n    private static async handleImportCommand(uri: vscode.Uri): Promise<void> {\r\n        try {\r\n            await TemplateService.importTemplate(uri);\r\n        } catch (error) {\r\n            UIUtils.showError(`导入模板失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理新建文件命令\r\n     */\r\n    private static async handleNewCommand(uri: vscode.Uri): Promise<void> {\r\n        try {\r\n            await TemplateService.createNewFile(uri);\r\n        } catch (error) {\r\n            UIUtils.showError(`创建新文件失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理状态栏按钮命令\r\n     */\r\n    private static async handleBtnCommand(): Promise<void> {\r\n        try {\r\n            const action = await UIUtils.showActionMenu();\r\n            if (!action) {\r\n                return;\r\n            }\r\n\r\n            switch (action) {\r\n                case '配置模板路径':\r\n                    await Configuration.openSettings();\r\n                    break;\r\n                case '管理模板':\r\n                    await TemplateService.manageTemplates();\r\n                    break;\r\n                case '启用代码镜头':\r\n                case '禁用代码镜头':\r\n                    await this.handleToggleCodeLensCommand();\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            UIUtils.showError(`执行操作失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理添加到insert目录命令\r\n     */\r\n    private static async handleAddToInsertDirCommand(): Promise<void> {\r\n        try {\r\n            await TemplateService.addToInsertDir();\r\n        } catch (error) {\r\n            UIUtils.showError(`添加模板失败: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理切换CodeLens命令\r\n     */\r\n    private static async handleToggleCodeLensCommand(): Promise<void> {\r\n        try {\r\n            const newState = await Configuration.toggleCodeLens();\r\n            UIUtils.showInfo(`代码镜头已${newState ? '启用' : '禁用'}`);\r\n            \r\n            // 触发CodeLens刷新\r\n            vscode.commands.executeCommand('vscode.executeCodeLensProvider');\r\n        } catch (error) {\r\n            UIUtils.showError(`切换代码镜头状态失败: ${error}`);\r\n        }\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * 文件系统工具类 - 处理文件和目录操作\r\n */\r\nexport class FileSystemUtils {\r\n    /**\r\n     * 检查目录是否存在\r\n     */\r\n    public static directoryExists(dirPath: string): boolean {\r\n        try {\r\n            const stat = fs.statSync(dirPath);\r\n            return stat.isDirectory();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查文件是否存在\r\n     */\r\n    public static fileExists(filePath: string): boolean {\r\n        try {\r\n            const stat = fs.statSync(filePath);\r\n            return stat.isFile();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建目录（如果不存在）\r\n     */\r\n    public static createDirectory(dirPath: string): boolean {\r\n        try {\r\n            if (!this.directoryExists(dirPath)) {\r\n                fs.mkdirSync(dirPath, { recursive: true });\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`创建目录失败: ${dirPath}`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 读取目录下的所有子目录\r\n     */\r\n    public static getSubDirectories(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            return fs.readdirSync(dirPath)\r\n                .filter(item => {\r\n                    const fullPath = path.join(dirPath, item);\r\n                    return this.directoryExists(fullPath);\r\n                });\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 读取目录下的所有文件\r\n     */\r\n    public static getFiles(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            return fs.readdirSync(dirPath)\r\n                .filter(item => {\r\n                    const fullPath = path.join(dirPath, item);\r\n                    return this.fileExists(fullPath);\r\n                });\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归获取目录下的所有文件\r\n     */\r\n    public static getFilesRecursively(dirPath: string): string[] {\r\n        if (!this.directoryExists(dirPath)) {\r\n            return [];\r\n        }\r\n\r\n        const files: string[] = [];\r\n        \r\n        try {\r\n            const items = fs.readdirSync(dirPath);\r\n            \r\n            for (const item of items) {\r\n                const fullPath = path.join(dirPath, item);\r\n                const stat = fs.statSync(fullPath);\r\n                \r\n                if (stat.isFile()) {\r\n                    files.push(fullPath);\r\n                } else if (stat.isDirectory()) {\r\n                    files.push(...this.getFilesRecursively(fullPath));\r\n                }\r\n            }\r\n        } catch {\r\n            // 忽略错误\r\n        }\r\n\r\n        return files;\r\n    }\r\n\r\n    /**\r\n     * 读取文件内容\r\n     */\r\n    public static readFileContent(filePath: string): string | null {\r\n        try {\r\n            return fs.readFileSync(filePath, 'utf8');\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 写入文件内容\r\n     */\r\n    public static writeFileContent(filePath: string, content: string): boolean {\r\n        try {\r\n            // 确保目录存在\r\n            const dir = path.dirname(filePath);\r\n            if (!this.directoryExists(dir)) {\r\n                fs.mkdirSync(dir, { recursive: true });\r\n            }\r\n            \r\n            fs.writeFileSync(filePath, content, 'utf8');\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 复制文件\r\n     */\r\n    public static copyFile(sourcePath: string, targetPath: string): boolean {\r\n        try {\r\n            // 确保目标目录存在\r\n            const targetDir = path.dirname(targetPath);\r\n            if (!this.directoryExists(targetDir)) {\r\n                fs.mkdirSync(targetDir, { recursive: true });\r\n            }\r\n            \r\n            fs.copyFileSync(sourcePath, targetPath);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归复制目录下的所有文件（不包含目录结构）\r\n     */\r\n    public static copyFilesRecursively(sourceDir: string, targetDir: string): boolean {\r\n        try {\r\n            const files = this.getFilesRecursively(sourceDir);\r\n            \r\n            for (const file of files) {\r\n                const fileName = path.basename(file);\r\n                const targetPath = path.join(targetDir, fileName);\r\n                \r\n                if (!this.copyFile(file, targetPath)) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归复制目录并保留内部目录结构（不包含根目录本身）\r\n     * @param sourceDir 源目录路径\r\n     * @param targetDir 目标目录路径\r\n     * @returns 是否复制成功\r\n     */\r\n    public static copyDirectoryWithStructure(sourceDir: string, targetDir: string): boolean {\r\n        try {\r\n            if (!this.directoryExists(sourceDir)) {\r\n                return false;\r\n            }\r\n\r\n            const items = fs.readdirSync(sourceDir);\r\n            \r\n            for (const item of items) {\r\n                const sourcePath = path.join(sourceDir, item);\r\n                const targetPath = path.join(targetDir, item);\r\n                const stat = fs.statSync(sourcePath);\r\n                \r\n                if (stat.isFile()) {\r\n                    // 复制文件\r\n                    if (!this.copyFile(sourcePath, targetPath)) {\r\n                        return false;\r\n                    }\r\n                } else if (stat.isDirectory()) {\r\n                    // 递归复制子目录\r\n                    if (!this.directoryExists(targetPath)) {\r\n                        fs.mkdirSync(targetPath, { recursive: true });\r\n                    }\r\n                    if (!this.copyDirectoryWithStructure(sourcePath, targetPath)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('复制目录失败:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取文件或目录的父目录\r\n     */\r\n    public static getParentDirectory(filePath: string): string {\r\n        return path.dirname(filePath);\r\n    }\r\n\r\n    /**\r\n     * 从URI获取文件系统路径\r\n     */\r\n    public static getPathFromUri(uri: vscode.Uri): string {\r\n        return uri.fsPath;\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { Configuration } from '../config/Configuration';\r\nimport { FileSystemUtils } from '../utils/FileSystemUtils';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 模板服务类 - 核心业务逻辑\r\n */\r\nexport class TemplateService {\r\n    /**\r\n     * 插入模板内容到当前编辑器\r\n     */\r\n    public static async insertTemplate(): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const insertDir = templateDirs.insert;\r\n        if (!FileSystemUtils.directoryExists(insertDir)) {\r\n            UIUtils.showError('insert目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 获取当前活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            UIUtils.showError('没有打开的编辑器');\r\n            return;\r\n        }\r\n\r\n        // 获取当前文件的扩展名作为默认筛选器\r\n        const currentFileName = editor.document.fileName;\r\n        const fileExtension = path.extname(currentFileName);\r\n        const defaultFilter = fileExtension ? fileExtension.substring(1) : undefined; // 移除点号\r\n\r\n        // 选择模板类型文件夹\r\n        const subDirs = FileSystemUtils.getSubDirectories(insertDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('insert目录下没有模板文件夹');\r\n            return;\r\n        }\r\n\r\n        const selectedDir = await UIUtils.showQuickPickWithFilter(\r\n            subDirs, \r\n            defaultFilter, \r\n            `选择模板类型${defaultFilter ? ` (当前文件: .${defaultFilter})` : ''}`\r\n        );\r\n        if (!selectedDir) {\r\n            return;\r\n        }\r\n\r\n        // 选择具体模板文件\r\n        const templateDirPath = path.join(insertDir, selectedDir);\r\n        const templateFiles = FileSystemUtils.getFiles(templateDirPath);\r\n        if (templateFiles.length === 0) {\r\n            UIUtils.showError('所选模板类型下没有模板文件');\r\n            return;\r\n        }\r\n\r\n        const selectedFile = await UIUtils.showQuickPick(templateFiles, '选择模板文件');\r\n        if (!selectedFile) {\r\n            return;\r\n        }\r\n\r\n        // 读取模板内容并插入\r\n        const templateFilePath = path.join(templateDirPath, selectedFile);\r\n        const content = FileSystemUtils.readFileContent(templateFilePath);\r\n        if (content === null) {\r\n            UIUtils.showError('无法读取模板文件内容');\r\n            return;\r\n        }\r\n\r\n        // 在光标位置插入内容，支持多行缩进\r\n        await editor.edit(editBuilder => {\r\n            // 获取光标所在行的缩进\r\n            const currentLine = editor.document.lineAt(editor.selection.active.line);\r\n            const lineText = currentLine.text;\r\n            const cursorColumn = editor.selection.active.character;\r\n            \r\n            // 获取光标前的内容作为缩进基准\r\n            const indentText = lineText.substring(0, cursorColumn);\r\n            \r\n            // 如果内容包含换行符，需要为除第一行外的所有行添加缩进\r\n            let formattedContent = content;\r\n            if (content.includes('\\n')) {\r\n                const lines = content.split('\\n');\r\n                formattedContent = lines.map((line, index) => {\r\n                    // 第一行不需要添加缩进，其他行都要添加\r\n                    if (index === 0) {\r\n                        return line;\r\n                    } else {\r\n                        // 为非第一行添加与光标位置相同的缩进\r\n                        return indentText + line;\r\n                    }\r\n                }).join('\\n');\r\n            }\r\n            \r\n            editBuilder.insert(editor.selection.active, formattedContent);\r\n        });\r\n\r\n        UIUtils.showInfo('模板内容已插入');\r\n    }\r\n\r\n    /**\r\n     * 导入模板目录到目标位置\r\n     */\r\n    public static async importTemplate(targetUri?: vscode.Uri): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const importDir = templateDirs.import;\r\n        if (!FileSystemUtils.directoryExists(importDir)) {\r\n            UIUtils.showError('import目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 确定目标目录\r\n        let targetPath: string;\r\n        if (targetUri) {\r\n            const resourcePath = FileSystemUtils.getPathFromUri(targetUri);\r\n            if (FileSystemUtils.fileExists(resourcePath)) {\r\n                // 如果是文件，使用其父目录\r\n                targetPath = FileSystemUtils.getParentDirectory(resourcePath);\r\n            } else {\r\n                // 如果是目录，直接使用\r\n                targetPath = resourcePath;\r\n            }\r\n        } else {\r\n            UIUtils.showError('请在资源管理器中选择目标位置');\r\n            return;\r\n        }\r\n\r\n        // 选择要导入的模板目录\r\n        const subDirs = FileSystemUtils.getSubDirectories(importDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('import目录下没有模板目录');\r\n            return;\r\n        }\r\n\r\n        const selectedDir = await UIUtils.showQuickPick(subDirs, '选择要导入的模板目录');\r\n        if (!selectedDir) {\r\n            return;\r\n        }\r\n\r\n        // 执行导入操作 - 保留内部目录结构\r\n        const sourceDir = path.join(importDir, selectedDir);\r\n        const success = FileSystemUtils.copyDirectoryWithStructure(sourceDir, targetPath);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已成功导入模板到: ${targetPath}（保留目录结构）`);\r\n        } else {\r\n            UIUtils.showError('导入模板失败');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建新文件从模板\r\n     */\r\n    public static async createNewFile(targetUri?: vscode.Uri): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const newDir = templateDirs.new;\r\n        if (!FileSystemUtils.directoryExists(newDir)) {\r\n            UIUtils.showError('new目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 确定目标目录\r\n        let targetPath: string;\r\n        if (targetUri) {\r\n            const resourcePath = FileSystemUtils.getPathFromUri(targetUri);\r\n            if (FileSystemUtils.fileExists(resourcePath)) {\r\n                // 如果是文件，使用其父目录\r\n                targetPath = FileSystemUtils.getParentDirectory(resourcePath);\r\n            } else {\r\n                // 如果是目录，直接使用\r\n                targetPath = resourcePath;\r\n            }\r\n        } else {\r\n            UIUtils.showError('请在资源管理器中选择目标位置');\r\n            return;\r\n        }\r\n\r\n        // 选择模板文件\r\n        const templateFiles = FileSystemUtils.getFiles(newDir);\r\n        if (templateFiles.length === 0) {\r\n            UIUtils.showError('new目录下没有模板文件');\r\n            return;\r\n        }\r\n\r\n        const selectedFile = await UIUtils.showQuickPick(templateFiles, '选择模板文件');\r\n        if (!selectedFile) {\r\n            return;\r\n        }\r\n\r\n        // 获取新文件名\r\n        const fileName = await UIUtils.showInputBox('输入新文件名', '请输入新文件名（不含扩展名）');\r\n        if (!fileName) {\r\n            return;\r\n        }\r\n\r\n        // 确定文件扩展名\r\n        const templateExt = path.extname(selectedFile);\r\n        const newFileName = fileName + templateExt;\r\n        const newFilePath = path.join(targetPath, newFileName);\r\n\r\n        // 检查文件是否已存在\r\n        if (FileSystemUtils.fileExists(newFilePath)) {\r\n            const overwrite = await UIUtils.showConfirmDialog(`文件 ${newFileName} 已存在，是否覆盖？`);\r\n            if (!overwrite) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 复制模板文件\r\n        const templateFilePath = path.join(newDir, selectedFile);\r\n        const success = FileSystemUtils.copyFile(templateFilePath, newFilePath);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已创建新文件: ${newFileName}`);\r\n            // 打开新创建的文件\r\n            const document = await vscode.workspace.openTextDocument(newFilePath);\r\n            await vscode.window.showTextDocument(document);\r\n        } else {\r\n            UIUtils.showError('创建新文件失败');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 管理模板 - 在新窗口中打开模板目录\r\n     */\r\n    public static async manageTemplates(): Promise<void> {\r\n        const templatePath = Configuration.getTemplatePath();\r\n        if (!templatePath) {\r\n            UIUtils.showError('未配置模板路径');\r\n            return;\r\n        }\r\n\r\n        if (!Configuration.validateTemplatePath(templatePath)) {\r\n            UIUtils.showError('模板路径无效');\r\n            return;\r\n        }\r\n\r\n        // 在新窗口中打开模板目录\r\n        const uri = vscode.Uri.file(templatePath);\r\n        await vscode.commands.executeCommand('vscode.openFolder', uri, { forceNewWindow: true });\r\n    }\r\n\r\n    /**\r\n     * 将当前选中的文本添加到insert模板目录\r\n     */\r\n    public static async addToInsertDir(): Promise<void> {\r\n        const templateDirs = Configuration.getTemplateSubDirectories();\r\n        if (!templateDirs) {\r\n            UIUtils.showError('未配置模板路径或路径无效');\r\n            return;\r\n        }\r\n\r\n        const insertDir = templateDirs.insert;\r\n        if (!FileSystemUtils.directoryExists(insertDir)) {\r\n            UIUtils.showError('insert目录不存在');\r\n            return;\r\n        }\r\n\r\n        // 获取当前活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            UIUtils.showError('没有打开的编辑器');\r\n            return;\r\n        }\r\n\r\n        // 获取选中的文本\r\n        const selection = editor.selection;\r\n        if (selection.isEmpty) {\r\n            UIUtils.showError('请先选中要保存为模板的文本');\r\n            return;\r\n        }\r\n\r\n        const selectedText = editor.document.getText(selection);\r\n        if (!selectedText.trim()) {\r\n            UIUtils.showError('选中的文本不能为空');\r\n            return;\r\n        }\r\n\r\n        // 获取当前文件的扩展名作为默认目录\r\n        const currentFileName = editor.document.fileName;\r\n        const fileExtension = path.extname(currentFileName);\r\n        const defaultDir = fileExtension ? fileExtension.substring(1) : undefined; // 移除点号\r\n\r\n        // 获取insert目录下的所有子目录\r\n        const subDirs = FileSystemUtils.getSubDirectories(insertDir);\r\n        if (subDirs.length === 0) {\r\n            UIUtils.showError('insert目录下没有子目录，请先创建相应的模板分类目录');\r\n            return;\r\n        }\r\n\r\n        // 选择目标子目录\r\n        const selectedSubDir = await UIUtils.showQuickPickWithFilter(\r\n            subDirs,\r\n            defaultDir,\r\n            `选择模板分类目录${defaultDir ? ` (当前文件: .${defaultDir})` : ''}`\r\n        );\r\n        if (!selectedSubDir) {\r\n            return;\r\n        }\r\n\r\n        // 输入文件名\r\n        const fileName = await UIUtils.showInputBox(\r\n            '请输入模板文件名（不含扩展名）',\r\n            '输入模板文件名'\r\n        );\r\n        if (!fileName) {\r\n            return;\r\n        }\r\n\r\n        // 确定文件扩展名（使用当前文件的扩展名）\r\n        const templateFileName = fileName + (fileExtension || '.txt');\r\n        const templateFilePath = path.join(insertDir, selectedSubDir, templateFileName);\r\n\r\n        // 检查文件是否已存在\r\n        if (FileSystemUtils.fileExists(templateFilePath)) {\r\n            const overwrite = await UIUtils.showConfirmDialog(`模板文件 ${templateFileName} 已存在，是否覆盖？`);\r\n            if (!overwrite) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 保存选中的文本到模板文件\r\n        const success = FileSystemUtils.writeFileContent(templateFilePath, selectedText);\r\n        \r\n        if (success) {\r\n            UIUtils.showInfo(`已成功保存模板: ${selectedSubDir}/${templateFileName}`);\r\n        } else {\r\n            UIUtils.showError('保存模板文件失败');\r\n        }\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { FileSystemUtils } from '../utils/FileSystemUtils';\r\nimport { UIUtils } from '../utils/UIUtils';\r\n\r\n/**\r\n * 配置管理类 - 负责管理插件的配置项\r\n */\r\nexport class Configuration {\r\n    private static readonly CONFIG_SECTION = 'vs-file-template';\r\n    private static readonly TEMPLATE_PATH_KEY = 'templatePath';\r\n    private static readonly ENABLE_CODELENS_KEY = 'enableCodeLens';\r\n\r\n    /**\r\n     * 获取模板路径配置\r\n     */\r\n    public static getTemplatePath(): string | undefined {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        return config.get<string>(this.TEMPLATE_PATH_KEY);\r\n    }\r\n\r\n    /**\r\n     * 设置模板路径配置\r\n     */\r\n    public static async setTemplatePath(templatePath: string): Promise<void> {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        await config.update(this.TEMPLATE_PATH_KEY, templatePath, vscode.ConfigurationTarget.Global);\r\n    }\r\n\r\n    /**\r\n     * 验证模板路径是否有效\r\n     */\r\n    public static validateTemplatePath(templatePath: string): boolean {\r\n        if (!templatePath) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const stat = fs.statSync(templatePath);\r\n            return stat.isDirectory();\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取模板子目录路径\r\n     */\r\n    public static getTemplateSubDirectories(): { import: string; insert: string; new: string } | null {\r\n        const templatePath = this.getTemplatePath();\r\n        if (!templatePath || !this.validateTemplatePath(templatePath)) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            import: path.join(templatePath, 'import'),\r\n            insert: path.join(templatePath, 'insert'),\r\n            new: path.join(templatePath, 'new')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 检查并创建必需的模板子目录\r\n     */\r\n    public static ensureTemplateSubDirectories(): boolean {\r\n        const templatePath = this.getTemplatePath();\r\n        if (!templatePath) {\r\n            return false;\r\n        }\r\n\r\n        // 如果模板根目录不存在，先创建它\r\n        if (!this.validateTemplatePath(templatePath)) {\r\n            if (!FileSystemUtils.createDirectory(templatePath)) {\r\n                UIUtils.showError(`无法创建模板根目录: ${templatePath}`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // 创建必需的子目录\r\n        const requiredDirs = ['import', 'insert', 'new'];\r\n        const createdDirs: string[] = [];\r\n        let allSuccess = true;\r\n\r\n        for (const dirName of requiredDirs) {\r\n            const dirPath = path.join(templatePath, dirName);\r\n            if (!FileSystemUtils.directoryExists(dirPath)) {\r\n                if (FileSystemUtils.createDirectory(dirPath)) {\r\n                    createdDirs.push(dirName);\r\n                } else {\r\n                    UIUtils.showError(`无法创建目录: ${dirPath}`);\r\n                    allSuccess = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 显示创建结果\r\n        if (createdDirs.length > 0) {\r\n            UIUtils.showInfo(`已自动创建模板目录: ${createdDirs.join(', ')}`);\r\n        }\r\n\r\n        return allSuccess;\r\n    }\r\n\r\n    /**\r\n     * 打开设置页面\r\n     */\r\n    public static async openSettings(): Promise<void> {\r\n        await vscode.commands.executeCommand('workbench.action.openSettings', this.CONFIG_SECTION);\r\n    }\r\n\r\n    /**\r\n     * 获取CodeLens启用状态\r\n     */\r\n    public static getCodeLensEnabled(): boolean {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        return config.get<boolean>(this.ENABLE_CODELENS_KEY, true);\r\n    }\r\n\r\n    /**\r\n     * 设置CodeLens启用状态\r\n     */\r\n    public static async setCodeLensEnabled(enabled: boolean): Promise<void> {\r\n        const config = vscode.workspace.getConfiguration(this.CONFIG_SECTION);\r\n        await config.update(this.ENABLE_CODELENS_KEY, enabled, vscode.ConfigurationTarget.Global);\r\n    }\r\n\r\n    /**\r\n     * 切换CodeLens启用状态\r\n     */\r\n    public static async toggleCodeLens(): Promise<boolean> {\r\n        const currentState = this.getCodeLensEnabled();\r\n        const newState = !currentState;\r\n        await this.setCodeLensEnabled(newState);\r\n        return newState;\r\n    }\r\n}\r\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import * as vscode from 'vscode';\r\n\r\n/**\r\n * 状态栏管理器 - 管理状态栏按钮\r\n */\r\nexport class StatusBarManager {\r\n    private statusBarItem: vscode.StatusBarItem;\r\n\r\n    constructor() {\r\n        this.statusBarItem = vscode.window.createStatusBarItem(\r\n            vscode.StatusBarAlignment.Right,\r\n            100\r\n        );\r\n        this.setupStatusBarItem();\r\n    }\r\n\r\n    /**\r\n     * 设置状态栏按钮\r\n     */\r\n    private setupStatusBarItem(): void {\r\n        this.statusBarItem.text = '$(file-code) 模板';\r\n        this.statusBarItem.tooltip = '文件模板管理';\r\n        this.statusBarItem.command = 'vs-file-template.btn';\r\n        this.statusBarItem.show();\r\n    }\r\n\r\n    /**\r\n     * 显示状态栏按钮\r\n     */\r\n    public show(): void {\r\n        this.statusBarItem.show();\r\n    }\r\n\r\n    /**\r\n     * 隐藏状态栏按钮\r\n     */\r\n    public hide(): void {\r\n        this.statusBarItem.hide();\r\n    }\r\n\r\n    /**\r\n     * 销毁状态栏按钮\r\n     */\r\n    public dispose(): void {\r\n        this.statusBarItem.dispose();\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["showError","message","vscode","window","showErrorMessage","showInfo","showInformationMessage","showWarning","showWarningMessage","showQuickPick","items","placeholder","length","placeHolder","this","showQuickPickWithFilter","defaultFilter","Promise","resolve","quickPick","createQuickPick","quickPickItems","map","item","label","description","value","onDidChangeSelection","selection","hide","onDidHide","undefined","dispose","show","showInputBox","prompt","showOpenDialog","title","result","canSelectFiles","canSelectFolders","canSelectMany","showConfirmDialog","modal","showActionMenu","actions","Configuration","getCodeLensEnabled","context","console","log","CommandHandler","registerCommands","codeLensProvider","TemplateCodeLensProvider","codeLensDisposable","languages","registerCodeLensProvider","scheme","subscriptions","push","selectionChangeListener","onDidChangeTextEditorSelection","refresh","activeEditorChangeListener","onDidChangeActiveTextEditor","cursorChangeListener","statusBarManager","StatusBarManager","configChangeListener","workspace","onDidChangeConfiguration","event","affectsConfiguration","templatePath","getTemplatePath","validateTemplatePath","ensureTemplateSubDirectories","UIUtils","handleTemplatePathChanged","checkTemplateConfiguration","_onDidChangeCodeLenses","EventEmitter","onDidChangeCodeLenses","constructor","provideCodeLenses","document","token","codeLenses","uri","editor","activeTextEditor","cursorLine","active","line","cursorPosition","Range","insertCodeLens","CodeLens","command","tooltip","isEmpty","addToTemplateCodeLens","resolveCodeLens","codeLens","fire","module","exports","require","insertCommand","commands","registerCommand","handleInsertCommand","importCommand","handleImportCommand","newCommand","handleNewCommand","btnCommand","handleBtnCommand","addToInsertCommand","handleAddToInsertDirCommand","toggleCodeLensCommand","handleToggleCodeLensCommand","TemplateService","insertTemplate","error","importTemplate","createNewFile","action","openSettings","manageTemplates","addToInsertDir","newState","toggleCodeLens","executeCommand","directoryExists","dirPath","fs","statSync","isDirectory","fileExists","filePath","isFile","createDirectory","mkdirSync","recursive","getSubDirectories","readdirSync","filter","fullPath","path","join","getFiles","getFilesRecursively","files","stat","readFileContent","readFileSync","writeFileContent","content","dir","dirname","writeFileSync","copyFile","sourcePath","targetPath","targetDir","copyFileSync","copyFilesRecursively","sourceDir","file","fileName","basename","copyDirectoryWithStructure","getParentDirectory","getPathFromUri","fsPath","templateDirs","getTemplateSubDirectories","insertDir","insert","FileSystemUtils","currentFileName","fileExtension","extname","substring","subDirs","selectedDir","templateDirPath","templateFiles","selectedFile","templateFilePath","edit","editBuilder","lineText","lineAt","text","cursorColumn","character","indentText","formattedContent","includes","split","index","targetUri","importDir","import","resourcePath","newDir","new","newFileName","newFilePath","openTextDocument","showTextDocument","Uri","forceNewWindow","selectedText","getText","trim","defaultDir","selectedSubDir","templateFileName","static","getConfiguration","CONFIG_SECTION","get","TEMPLATE_PATH_KEY","setTemplatePath","config","update","ConfigurationTarget","Global","requiredDirs","createdDirs","allSuccess","dirName","ENABLE_CODELENS_KEY","setCodeLensEnabled","enabled","statusBarItem","createStatusBarItem","StatusBarAlignment","Right","setupStatusBarItem","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}